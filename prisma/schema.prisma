// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  name     String
  email    String    @unique
  password String
  image    String?
  tasks    Task[]
  chats    Chat[]
  messages Message[]
  columns  Column[]

  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?

  workspaces Workspace[] @relation("WorkspaceMembers")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()

  @@map("users")
}

model Task {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int?
  user_id     String
  priority    String   @default("LOW")
  user        User     @relation(fields: [user_id], references: [id])
  column_id   String
  column      Column   @relation(fields: [column_id], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@map("tasks")
}

model Chat {
  id        String    @id @default(uuid())
  members   User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("chats")
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  content   String
  image     String?
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Workspace {
  id        String   @id @default(uuid())
  name      String
  owner_id  String
  priority  String   @default("LOW")
  members   User[]   @relation("WorkspaceMembers")
  columns   Column[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workspaces")
}

model Column {
  id          String     @id @default(uuid())
  title       String
  userId      String
  order       Int?
  user        User       @relation(fields: [userId], references: [id])
  tasks       Task[]
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("columns")
}
